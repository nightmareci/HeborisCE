cmake_minimum_required(VERSION 3.18)
project(HeborisCE
	VERSION 1.1.1
	LANGUAGES C
)

set(APP_PROJECT_VERSION "${CMAKE_PROJECT_VERSION}")
set(APP_PROJECT_CREATOR "nightmareci")
set(APP_PROJECT_NAME "${CMAKE_PROJECT_NAME}")

# NOTE: Never, ever change APP_FILESYSTEM_ORG and APP_FILESYSTEM_APP, unless you're
# making a hard fork such that you're effectively making a new, distinct game,
# that needs its own separate save data, in which case you'd still stick with
# the new org/app names once the initially decided upon names are used in your
# first distributed release. So, carefully choose org/app to be highly unique,
# to increase likelihood no other program will ever clash with your choice;
# something based on a web domain is a reasonable choice. These variables
# together constitute the save data identifier for the game, so as long as the
# save data should maintain continuity through new release versions, these
# shouldn't be changed, even if the user-facing naming/branding changes.
#
# For maximum safety/portability, just stick to the subset of ASCII only
# including the English alphabet, numbers, space, hyphen, and never change
# alphabetic case once decided upon, while also not choosing names that differ
# from another application's names only in alphabetic case, which accommodates
# both case insensitive and sensitive filesystems.
#
# Heboris C.E. was originally called HeborisC7EX-SDL2, and was rebranded later
# to better indicate the direction of the project, so the project is stuck with
# the originally-chosen "HeborisC7EX SDL2" filesystem application name.
set(APP_FILESYSTEM_ORG "${APP_PROJECT_CREATOR}")
set(APP_FILESYSTEM_APP "HeborisC7EX SDL2")

if(CMAKE_SYSTEM_NAME MATCHES "Emscripten")
	set(APP_EXE index)
else()
	set(APP_EXE ${CMAKE_PROJECT_NAME})
endif()

option(APP_VENDORED "Use vendor libraries (the version of libraries bundled with the code)" OFF)

# Override these defaults for platforms as required. These defaults work on a
# lot of platforms, but some platforms, like game consoles, have to completely
# override these settings.
option(APP_ENABLE_KEYBOARD "Enable input via keyboard" TRUE)
option(APP_ENABLE_GAME_CONTROLLER "Enable input via game controllers (not the same as classic joystick input)" TRUE)
option(APP_APP_ENABLE_GAME_CONTROLLER_DB "Enable loading gamecontrollerdb.txt for supporting more game controllers" TRUE)
option(APP_ENABLE_JOYSTICK "Enable input via any joystick device" TRUE)
option(APP_ENABLE_ALL_VIDEO_SETTINGS "Enable all video settings; disabling this option hides some \"unsafe\" settings" TRUE)
option(APP_ENABLE_GAME_QUIT "Enables quitting the game by pressing escape at any time or selecting the \"QUIT\" main menu entry" TRUE)

set(APP_DEFAULT_JOYKEY_ASSIGN "{ 0 }")
set(APP_SCREEN_SUBPIXEL_OFFSET "APP_GetScreenSubpixelOffset()")
set(APP_DEFAULT_SCREEN_MODE "(APP_SCREENMODE_WINDOW | APP_SCREENMODE_DETAILLEVEL)")

set(APP_FILESYSTEM_TYPE "APP_FILESYSTEM_WORKINGDIR")
set(APP_BASE_PATH_APPEND "")

if(WIN32 OR LINUX)
	set(APP_PACKAGE_TYPE "WorkingDir" CACHE STRING "Package type; must be \"WorkingDir\", \"Installable\", or \"Portable\"")
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
	set(APP_PACKAGE_TYPE "WorkingDir" CACHE STRING "Package type; must be \"WorkingDir\", \"Installable\", \"Portable\", \"Installable Mac App\", or \"Portable Mac App\"")
endif()

add_executable(${APP_EXE}
	"src/app/APP_main.c"
	"src/app/APP.c"
	"src/app/APP_bdf.c"
	"src/app/APP_filesystem.c"
	"src/app/nanotime.c"
	"src/app/hashmap.c"

	"src/game/gamestart.c"
	"src/game/init.c"
	"src/game/speed.c"
	"src/game/mission_info.c"
	"src/game/flexdraw.c"
	"src/game/config.c"
	"src/game/world.c"
	"src/game/classic.c"
	"src/game/ars.c"
	"src/game/classic_D.c"
	"src/game/effect.c"
	"src/game/sound.c"
	"src/game/practice.c"
	"src/game/tomoyo.c"
	"src/game/ranking.c"
	"src/game/setdef.c"
	"src/game/replay.c"
	"src/game/staffroll.c"
	"src/game/cpu.c"
	"src/game/sectime.c"
	"src/game/mission.c"
	"src/game/view.c"
	"src/game/grade.c"
	"src/game/ranking2.c"
	"src/game/ranking3.c"

	"src/app/APP.h"
	"src/app/APP_common.h"
	"src/app/APP_filesystem.h"
	"src/app/APP_bdf.h"
	"src/app/nanotime.h"
	"src/app/hashmap.h"

	"src/game/gamestart.h"
	"src/game/init.h"
	"src/game/speed.h"
	"src/game/ars.h"
	"src/game/classic_D.h"
	"src/game/classic.h"
	"src/game/config.h"
	"src/game/cpu.h"
	"src/game/effect.h"
	"src/game/flexdraw.h"
	"src/game/grade.h"
	"src/game/common.h"
	"src/game/mission.h"
	"src/game/mission_info.h"
	"src/game/practice.h"
	"src/game/ranking2.h"
	"src/game/ranking3.h"
	"src/game/ranking.h"
	"src/game/replay.h"
	"src/game/sectime.h"
	"src/game/setdef.h"
	"src/game/sound.h"
	"src/game/staffroll.h"
	"src/game/tomoyo.h"
	"src/game/view.h"
	"src/game/world.h"
)

set_target_properties(${APP_EXE}
	PROPERTIES
		C_STANDARD 99
		C_STANDARD_REQUIRED TRUE
)

if(LINUX OR CMAKE_SYSTEM_NAME STREQUAL "Darwin" OR MINGW)
	add_compile_definitions(_POSIX_VERSION=200112L)
endif()

if(VITA)
	set(APP_FRAMEWORK_TYPE "VITA SDL3")

	if(NOT DEFINED CMAKE_TOOLCHAIN_FILE AND NOT DEFINED VITASDK)
		message(FATAL_ERROR "Vita SDK CMake toolchain file must be provided to the CMake configure command.")
	else()
		include("${VITASDK}/share/vita.cmake" REQUIRED)
	endif()

	# Adding to CMAKE_PREFIX_PATH like this fixes find_package commands in Vita SDK
	# builds.
	list(APPEND CMAKE_PREFIX_PATH "${VITASDK}/arm-vita-eabi/lib/cmake")

	# Vita SDK will fail linking the executable if position independent code is
	# used in the vendor libraries.
	set(CMAKE_POSITION_INDEPENDENT_CODE FALSE CACHE BOOL "Override" FORCE)

	target_sources(${APP_EXE} PRIVATE
		"src/app/physfsrwops.c"
		"src/app/physfsrwops.h"
	)

	set(APP_ENABLE_KEYBOARD FALSE CACHE BOOL "" FORCE)
	set(APP_ENABLE_JOYSTICK FALSE CACHE BOOL "" FORCE)
	set(APP_ONLY_INPUT_TYPE APP_INPUT_PLAYSTATION CACHE STRING "" FORCE)
	set(APP_ONLY_SDL_CONTROLLER_TYPE SDL_CONTROLLER_TYPE_PS4 CACHE STRING "" FORCE)
	set(APP_ENABLE_GAME_CONTROLLER_DB FALSE CACHE BOOL "" FORCE)
	set(APP_ENABLE_ALL_VIDEO_SETTINGS FALSE CACHE BOOL "" FORCE)
	set(APP_FILESYSTEM_TYPE APP_FILESYSTEM_PHYSFS CACHE STRING "" FORCE)
	set(APP_DEFAULT_SCREEN_MODE "(APP_SCREENMODE_FULLSCREEN | APP_SCREENMODE_DETAILLEVEL | APP_SCREENMODE_VSYNC)" CACHE STRING "" FORCE)
	set(APP_SCREEN_SUBPIXEL_OFFSET "0.0f" CACHE STRING "" FORCE)

	# The upstream PhysFS doesn't have Vita SDK support, so we need to use Vita
	# SDK's included PhysFS, not the vendor version, thus the need for FALSE passed
	# to AddLibrariesVendor and finding the PhysFS package.
	#
	# Also, as of last attempting Vita SDK builds, SDL2_mixer was broken with
	# find_package, as it tries to link to libxmp-lite, which was missing in the
	# Vita SDK packages; using the vendor version works fine, though.
	include("cmake/AddLibrariesVendor.cmake")
	AddLibrariesVendor(${APP_EXE} FALSE)
	find_package(PhysFS REQUIRED)
	target_link_libraries(${APP_EXE} PUBLIC ${PHYSFS_LIBRARY})
	target_include_directories(${APP_EXE} PUBLIC ${PHYSFS_INCLUDE_DIR})

	file(ARCHIVE_CREATE OUTPUT "${CMAKE_BINARY_DIR}/assets.zip"
		PATHS
			"res/bg"
			"res/bgm"
			"res/font"
			"res/graphics"
			"res/se"
			"config/mission"
			"config/stage"
		FORMAT zip
	)

	set(VITA_APP_NAME ${APP_EXE})
	set(VITA_TITLEID "NMCI00000")
	set(VITA_VERSION "01.00")
	set(VITA_MKSFOEX_FLAGS "${VITA_MKSFOEX_FLAGS} -d PARENTAL_LEVEL=1 -d ATTRIBUTE2=12")

	vita_create_self(${APP_EXE}.self ${APP_EXE})
	vita_create_vpk(${APP_EXE}.vpk ${VITA_TITLEID} ${APP_EXE}.self
		VERSION ${VITA_VERSION}
		NAME "${VITA_APP_NAME}"

		# Game assets.
		FILE "${CMAKE_BINARY_DIR}/assets.zip" assets.zip

		# Files for LiveArea and boot.
		FILE "pkg/vita/sce_sys/icon0.png" sce_sys/icon0.png
		FILE "pkg/vita/sce_sys/pic0.png" sce_sys/pic0.png
		FILE "pkg/vita/sce_sys/livearea/contents/bg0.png" sce_sys/livearea/contents/bg0.png
		FILE "pkg/vita/sce_sys/livearea/contents/template.xml" sce_sys/livearea/contents/template.xml
	)
elseif(WIN32 AND MSVC)
	set(APP_FRAMEWORK_TYPE "WINDOWS SDL3")

	add_compile_options("/MP")
	add_compile_options("/utf-8")

	target_sources(${APP_EXE} PRIVATE
		"src/app/physfsrwops.c"
		"src/app/physfsrwops.h"
	)

	option(CMAKE_WIN32_EXECUTABLE "Hide the Windows console." OFF)

	target_sources(${APP_EXE} PRIVATE "pkg/windows/icon.rc")

	if(APP_VENDORED)
		include("cmake/AddLibrariesVendor.cmake" REQUIRED)
		AddLibrariesVendor(${APP_EXE} TRUE)
	else()
		include("cmake/AddLibrariesFindPackage.cmake" REQUIRED)
		AddLibrariesFindPackage(${APP_EXE})
	endif()

	if(APP_PACKAGE_TYPE STREQUAL "WorkingDir")
		message(STATUS "Configuring working directory version; CMake installation is not supported")
	else()
		if(APP_PACKAGE_TYPE STREQUAL "Portable")
			message(STATUS "Configuring portable package")
			set(FILESYSTEM_TYPE "FILESYSTEM_PORTABLE")
		elseif(APP_PACKAGE_TYPE STREQUAL "Installable")
			message(STATUS "Configuring installable package")
			set(FILESYSTEM_TYPE "FILESYSTEM_INSTALLABLE")
		else()
			message(FATAL_ERROR "Package type \"${APP_PACKAGE_TYPE}\" unsupported; must be \"WorkingDir\", \"Portable\", or \"Installable\"")
		endif()

		install(TARGETS ${APP_EXE} DESTINATION ".")
		install(DIRECTORY "config/mission" "config/stage" DESTINATION "config")
		install(DIRECTORY "res" DESTINATION ".")
		install(FILES "changelog.txt" "heboris.txt" "LICENSE-hashmap.txt" "README.md" DESTINATION ".")
		include("cmake/InstallRuntimeDependenciesMSVC.cmake" REQUIRED)
	endif()
elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin" AND APP_PACKAGE_TYPE MATCHES "Mac App")
	set(APP_FRAMEWORK_TYPE "MACOSX SDL3")

	# Builds Mac application bundle, packaged into a DMG with CPack by default.

	target_sources(${APP_EXE} PRIVATE
		"src/app/physfsrwops.c"
		"src/app/physfsrwops.h"
		"pkg/macos/${APP_EXE}.icns"
	)

	set_property(TARGET ${APP_EXE} PROPERTY MACOSX_BUNDLE TRUE)
	set_source_files_properties("pkg/macos/${APP_EXE}.icns" PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
	set(MACOSX_BUNDLE_BUNDLE_NAME ${APP_EXE})
	set(MACOSX_BUNDLE_GUI_IDENTIFIER "${APP_PROJECT_NAME}")
	set(MACOSX_BUNDLE_ICON_FILE ${APP_EXE})
	if(APP_PACKAGE_TYPE MATCHES "Portable")
		set(SDL_FILESYSTEM_BASE_DIR_TYPE "parent")
		set(APP_INSTALL_DIR ${APP_EXE})
		install(TARGETS ${APP_EXE} BUNDLE DESTINATION "${APP_EXE}")
		install(FILES "changelog.txt" "heboris.txt" "LICENSE-hashmap.txt" "README.md" DESTINATION "${APP_EXE}")
		install(DIRECTORY "config/mission" "config/stage" DESTINATION "${APP_EXE}/config")
		install(DIRECTORY "res" DESTINATION "${APP_EXE}")
	elseif(APP_PACKAGE_TYPE MATCHES "Installable")
		set(SDL_FILESYSTEM_BASE_DIR_TYPE "resource")
		set(APP_INSTALL_DIR .)
		install(TARGETS ${APP_EXE} BUNDLE DESTINATION .)
		install(FILES "changelog.txt" "heboris.txt" "LICENSE-hashmap.txt" "README.md" DESTINATION .)
		install(DIRECTORY "config/mission" "config/stage" DESTINATION "${APP_EXE}.app/Contents/Resources/config")
		install(DIRECTORY "res" DESTINATION "${APP_EXE}.app/Contents/Resources")
	else()
		message(FATAL_ERROR "Package type \"${APP_PACKAGE_TYPE}\" unsupported when building a macOS app")
	endif()

	set_target_properties(${APP_EXE} PROPERTIES
		MACOSX_BUNDLE_INFO_PLIST "cmake/MacOSXBundleInfo.plist.cmake"
		INSTALL_RPATH "@executable_path"
		RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
	)

	if(APP_VENDORED)
		include("cmake/AddLibrariesVendor.cmake" REQUIRED)
		AddLibrariesVendor(${APP_EXE} TRUE)
	else()
		include("cmake/AddLibrariesPkgConfig.cmake" REQUIRED)
		AddLibrariesPkgConfig(${APP_EXE})
	endif()

	set(APP_APPLE_CERT_NAME - CACHE STRING "The name of the Apple supplied code signing certificate to use. Defaults to adhoc signing (\"-\")")
	include(CMakeFindBinUtils)
	install(CODE "
		set(APP_POST_EXCLUDES
		\"^/usr/lib\"
		\"^/System/Library/Frameworks\"
		)

		file(GET_RUNTIME_DEPENDENCIES
			EXECUTABLES \$<TARGET_FILE:${APP_EXE}>
			POST_EXCLUDE_REGEXES
				\${APP_POST_EXCLUDES}
			RESOLVED_DEPENDENCIES_VAR RESOLVED_DEPENDENCIES
			UNRESOLVED_DEPENDENCIES_VAR UNRESOLVED_DEPENDENCIES
		)

		file(INSTALL
			DESTINATION \"\${CMAKE_INSTALL_PREFIX}/${APP_INSTALL_DIR}/${APP_EXE}.app/Contents/libs\"
			TYPE SHARED_LIBRARY
			FOLLOW_SYMLINK_CHAIN
			FILES \${RESOLVED_DEPENDENCIES}
		)

		set(APP_CHANGES \"\")
		set(APP_LIBS \"\")
		foreach(RESOLVED_DEPENDENCY \${RESOLVED_DEPENDENCIES})
			string(REGEX REPLACE \"^.*/([^/]+)\" \"\\\\1\" LIB \"\${RESOLVED_DEPENDENCY}\")
			list(APPEND APP_CHANGES -change \"\${RESOLVED_DEPENDENCY}\" \"@rpath/../libs/\${LIB}\")
			list(APPEND APP_LIBS \"\${LIB}\")
		endforeach()

		if(\"${APP_APPLE_CERT_NAME}\" STREQUAL -)
			set(APP_ENTITLEMENTS adhoc)
		else()
			set(APP_ENTITLEMENTS identity-required)
		endif()

		foreach(APP_LIB \${APP_LIBS})
			execute_process(COMMAND ${CMAKE_INSTALL_NAME_TOOL} \${APP_CHANGES} -id \"@rpath/../libs/\${APP_LIB}\" \"\${CMAKE_INSTALL_PREFIX}/${APP_INSTALL_DIR}/${APP_EXE}.app/Contents/libs/\${APP_LIB}\")
			execute_process(COMMAND xcrun codesign --remove-signature \"\${CMAKE_INSTALL_PREFIX}/${APP_INSTALL_DIR}/${APP_EXE}.app/Contents/libs/\${APP_LIB}\")
			execute_process(COMMAND xcrun codesign -f -o runtime --timestamp -s \"${APP_APPLE_CERT_NAME}\" --entitlements \"${CMAKE_SOURCE_DIR}/pkg/macos/entitlements-\${APP_ENTITLEMENTS}.xml\" \"\${CMAKE_INSTALL_PREFIX}/${APP_INSTALL_DIR}/${APP_EXE}.app/Contents/libs/\${APP_LIB}\")
		endforeach()
		execute_process(COMMAND ${CMAKE_INSTALL_NAME_TOOL} \${APP_CHANGES} \"\${CMAKE_INSTALL_PREFIX}/${APP_INSTALL_DIR}/${APP_EXE}.app/Contents/MacOS/${APP_EXE}\")
		execute_process(COMMAND xcrun codesign --remove-signature \"\${CMAKE_INSTALL_PREFIX}/${APP_INSTALL_DIR}/${APP_EXE}.app\")
		execute_process(COMMAND xcrun codesign -f -o runtime --timestamp -s \"${APP_APPLE_CERT_NAME}\" --entitlements \"${CMAKE_SOURCE_DIR}/pkg/macos/entitlements-\${APP_ENTITLEMENTS}.xml\" \"\${CMAKE_INSTALL_PREFIX}/${APP_INSTALL_DIR}/${APP_EXE}.app\")
	")

	set(CPACK_DMG_VOLUME_NAME ${APP_EXE})
	set(CPACK_PACKAGE_VENDOR "${APP_PROJECT_CREATOR}")
	if(APP_PACKAGE_TYPE MATCHES "Portable")
		set(CPACK_PACKAGE_FILE_NAME "${APP_EXE}-Portable-App-macOS")
	elseif(${APP_PACKAGE_TYPE} MATCHES "Installable")
		set(CPACK_PACKAGE_FILE_NAME "${APP_EXE}-Installable-App-macOS")
	endif()
	set(CPACK_GENERATOR "DragNDrop")
	include(CPack)
elseif(LINUX OR CMAKE_SYSTEM_NAME STREQUAL "Darwin" OR MINGW OR UNIX)
	if(CMAKE_SYSTEM_NAME STREQUAL Darwin)
		set(APP_FRAMEWORK_TYPE "MACOSX SDL3")
	else()
		# It's probably a fair assumption that system names are always ASCII,
		# so it's likely no conversion to ASCII is needed here; the framework
		# version is displayed using the game font, not the Unicode font, so it
		# must be ASCII.
		string(TOUPPER "${CMAKE_SYSTEM_NAME}" APP_FRAMEWORK_TARGET)
		set(APP_FRAMEWORK_TYPE "${APP_FRAMEWORK_TARGET} SDL3")
	endif()

	# Builds commandline program for some Unix-type platforms. The "Portable" package type supports creating distributable packages with CPack.

	option(APP_ENABLE_LINUX_GPIO_INPUT "Enable input via GPIO (Linux only)" OFF)
	if(APP_ENABLE_LINUX_GPIO_INPUT)
		if(LINUX)
			set(APP_ENABLE_LINUX_GPIO TRUE)
			target_link_libraries(${APP_EXE} PRIVATE gpiod)
		else()
			message(FATAL_ERROR "\"APP_ENABLE_LINUX_GPIO_INPUT\" is only supported when targeting Linux")
		endif()
	endif()

	if(APP_PACKAGE_TYPE STREQUAL "WorkingDir")
	elseif(APP_PACKAGE_TYPE STREQUAL "Portable")
		set(APP_FILESYSTEM_TYPE "APP_FILESYSTEM_PORTABLE")
		install(TARGETS ${APP_EXE} DESTINATION ${APP_EXE})
		install(DIRECTORY "config/mission" "config/stage" DESTINATION "${APP_EXE}/config")
		install(DIRECTORY "res" DESTINATION ${APP_EXE})
		install(FILES "changelog.txt" "heboris.txt" "LICENSE-hashmap.txt" "README.md" DESTINATION ${APP_EXE})
	elseif(APP_PACKAGE_TYPE STREQUAL "Installable")
		message(STATUS "Configuring installable package")
		set(APP_FILESYSTEM_TYPE "APP_FILESYSTEM_INSTALLABLE")
		include(GNUInstallDirs REQUIRED)
		set(APP_BASE_PATH_APPEND "../${CMAKE_INSTALL_DATAROOTDIR}/${APP_EXE}")
		install(TARGETS ${APP_EXE} DESTINATION "${CMAKE_INSTALL_BINDIR}")
		install(DIRECTORY "config/mission" "config/stage" DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/${APP_EXE}/config")
		install(DIRECTORY "res" DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/${APP_EXE}")
		install(FILES "README.md" DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/${APP_EXE}")
		if(LINUX)
			set(APP_LINUX_DESKTOP_ICON ${APP_EXE} CACHE STRING "The file name of the icon to put into the Linux desktop file, without an extension")
			set(APP_COMMENT "Cross-platform Expansion and continuation of Heboris U.E.")
			configure_file("cmake/entry.desktop.cmake" "${CMAKE_BINARY_DIR}/${APP_EXE}.desktop" @ONLY)
			install(FILES "${CMAKE_BINARY_DIR}/${APP_EXE}.desktop" DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/applications")
			install(FILES "pkg/linux/icon.png" RENAME "${APP_EXE}.png" DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/256x256/apps")
		endif()
	else()
		message(FATAL_ERROR "Package type \"${APP_PACKAGE_TYPE}\" unsupported; must be \"WorkingDir\", \"Portable\", or \"Installable\"")
	endif()

	set_target_properties(${APP_EXE}
		PROPERTIES
		RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
	)

	if(APP_VENDORED)
		add_subdirectory(deps/SDL)
		target_link_libraries(${APP_EXE} PRIVATE SDL3::SDL3-static)
	else()
		find_package(SDL3 REQUIRED)
		target_link_libraries(${APP_EXE} PRIVATE SDL3::SDL3)
	endif()
elseif(CMAKE_SYSTEM_NAME MATCHES "Emscripten")
	# TODO: Add option to not include --emrun in linker flags for actual
	# releases, so they're suitable for hosting on a real web server.
	# TODO: Add "favicon.ico".

	set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)
	set(BUILD_SHARED_LIBS FALSE)

	# Emscripten needs vendor libraries to be handled differently than native
	# builds, so special handling is done here, instead of in
	# AddLibrariesVendor.

	if(APP_VENDORED)
		set(SDL_SHARED FALSE)
		set(SDL_STATIC TRUE)
		set(SDL_TEST FALSE)
		set(SDL2_DISABLE_UNINSTALL ON)
		add_subdirectory("dep/SDL" "${CMAKE_BINARY_DIR}/dep/SDL")

		set(SDL2IMAGE_VENDORED ON)
		set(SDL2IMAGE_DEPS_SHARED OFF)
		add_subdirectory("dep/SDL_image" "${CMAKE_BINARY_DIR}/dep/SDL_image")

		set(SDL2MIXER_VENDORED ON)
		set(SDL2MIXER_DEPS_SHARED OFF)
		set(SDL2MIXER_FLAC OFF)
		set(SDL2MIXER_GME OFF)
		set(SDL2MIXER_MOD OFF)
		set(SDL2MIXER_MP3 OFF)
		set(SDL2MIXER_MIDI OFF)
		set(SDL2MIXER_OPUS OFF)
		set(SDL2MIXER_VORBIS "VORBISFILE")
		set(SDL2MIXER_WAVE ON)
		set(SDL2MIXER_WAVPACK OFF)
		add_subdirectory("dep/SDL_mixer" "${CMAKE_BINARY_DIR}/dep/SDL_mixer")
	else()
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s USE_SDL_MIXER=2 -s SDL2_IMAGE_FORMATS=[\"png\"]")
	endif()

	set(APP_FRAMEWORK_TYPE "WEB SDL3")

	set(APP_ENABLE_JOYSTICK FALSE CACHE BOOL "" FORCE)
	set(APP_ENABLE_GAME_CONTROLLER FALSE CACHE BOOL "" FORCE)
	set(APP_ENABLE_GAME_CONTROLLER_DB FALSE CACHE BOOL "" FORCE)
	set(APP_ENABLE_ALL_VIDEO_SETTINGS FALSE CACHE BOOL "" FORCE)
	set(APP_ENABLE_GAME_QUIT FALSE CACHE BOOL "" FORCE)

	if(CMAKE_BUILD_TYPE MATCHES "Release")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3")
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --shell-file '${CMAKE_SOURCE_DIR}/pkg/emscripten/index.html'")
	elseif(CMAKE_BUILD_TYPE MATCHES "Debug")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O0")
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s ASSERTIONS")
	endif()

	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --emrun -s EXPORTED_RUNTIME_METHODS=ccall -s EXPORTED_FUNCTIONS=_main,_startup -s ALLOW_MEMORY_GROWTH -lidbfs.js -s FORCE_FILESYSTEM=1 \
		--preload-file '${CMAKE_SOURCE_DIR}/res/bg/highDetail@basepath/res/bg/highDetail' \
		--preload-file '${CMAKE_SOURCE_DIR}/res/bg/lowDetail@basepath/res/bg/lowDetail' \
		--preload-file '${CMAKE_SOURCE_DIR}/res/bgm@basepath/res/bgm' \
		--preload-file '${CMAKE_SOURCE_DIR}/res/font@basepath/res/font' \
		--preload-file '${CMAKE_SOURCE_DIR}/res/graphics/highDetail@basepath/res/graphics/highDetail' \
		--preload-file '${CMAKE_SOURCE_DIR}/res/graphics/lowDetail@basepath/res/graphics/lowDetail' \
		--preload-file '${CMAKE_SOURCE_DIR}/res/graphics/title@basepath/res/graphics/title' \
		--preload-file '${CMAKE_SOURCE_DIR}/res/se@basepath/res/se' \
		--preload-file '${CMAKE_SOURCE_DIR}/config/mission@basepath/config/mission' \
		--preload-file '${CMAKE_SOURCE_DIR}/config/stage@basepath/config/stage' \
	")

	set_property(TARGET ${APP_EXE} PROPERTY SUFFIX ".html")

	if(APP_VENDORED)
		if(TARGET SDL2::SDL2main)
			target_link_libraries(${APP_EXE} PUBLIC SDL2::SDL2main)
		endif()
		target_link_libraries(${APP_EXE} PUBLIC
			SDL2::SDL2-static
			SDL2_image::SDL2_image-static
			SDL2_mixer::SDL2_mixer-static
		)
	endif()
else()
	message(FATAL_ERROR "The current build target is not supported")
endif()

configure_file("src/app/APP_build_config.h.cmake" "src/app/APP_build_config.h" @ONLY)
target_sources(${APP_EXE} PRIVATE "${CMAKE_BINARY_DIR}/src/app/APP_build_config.h")
target_include_directories(${APP_EXE} PRIVATE "src" "${CMAKE_BINARY_DIR}/src")
